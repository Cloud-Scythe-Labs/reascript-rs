name: Generate Reaper Plugin Functions Pull Request
on:
  schedule:
    - cron: '0 0 * * *' # Runs daily
  workflow_dispatch:

jobs:
  check-reaper-version:
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.get_version.outputs.latest_version }}
      update_needed: ${{ steps.check_for_update.outputs.update_needed }}
    steps:
      - name: Get latest Reaper release version
        id: get_version
        run: |
          # Extract the full version number from the download page.
          # The way we do this is a bit brittle and could break in the future
          # should the website be updated. Currently we look for `REAPER X.XX`
          # since looking for `REAPER vX.XX` returns multiple matches.
          latest_version=$(curl -s https://www.reaper.fm/download.php | grep -oP 'REAPER \K[0-9.]+')
          echo "Latest version: $latest_version"
          echo "::set-output name=latest_version::$latest_version"

      - name: Check if update is needed
        id: check_for_update
        run: |
          # Extract the full version number from the generated header file
          # and compare it to the latest version on reaper.fm download page.
          current_version=$(curl -O https://raw.githubusercontent.com/justinfrankel/reaper-sdk/main/sdk/reaper_plugin_functions.h | grep -oP '// Generated by REAPER v\K[0-9]+(\.[0-9]+)+' || echo "Current Version Not Found" & exit 1)
          latest_version=${{ steps.get_version.outputs.latest_version }}
          if [[ "$(printf '%s\n' "$current_version" "$latest_version" | sort -V | head -n 1)" != "$latest_version" ]]; then
            echo "Update needed"
            echo "::set-output name=update_needed::true"
          else
            echo "No update needed"
            echo "::set-output name=update_needed::false"
          fi

  generate-reaper-plugin-functions:
    runs-on: ubuntu-latest
    needs: check-reaper-version
    if: ${{ needs.check-reaper-version.outputs.update_needed == 'true' }}
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libxcb-util1 libxcb-icccm4 libxcb-cursor0 libxcb-keysyms1 libxcb-xinerama0 libxcb-xkb1 libxkbcommon-x11-0 libxkbcommon0 libxcb-xrm0 libxcb-randr0 xcb-proto xcb libx11-xcb-dev

      - name: Download and Install Reaper
        run: |
          latest_version=${{ needs.check-reaper-version.outputs.latest_version }}
          wget "https://www.reaper.fm/files/${latest_version}/reaper_linux_x86_64.tar.xz"
          tar -xf reaper_linux_x86_64.tar.xz
          cd reaper_linux_x86_64
          sudo ./install-reaper.sh

      - name: Clone reaper-sdk repository fork
        run: |
          git clone https://github.com/justinfrankel/reaper-sdk.git

      - name: Generate header file
        run: |
          # Run your script and pass the path to the reaper-sdk directory
          ./run.sh "$(pwd)/reaper-sdk/sdk"

      - name: Commit and push changes
        run: |
          latest_version=${{ needs.check-reaper-version.outputs.latest_version }}
          git config --global user.email "cloudscythelabs@gmail.com"
          git config --global user.name "CloudScytheLabs"
          git checkout -b update-header-${latest_version}
          git add reaper_plugin_functions.h reaper_version.txt
          echo "${latest_version}" > reaper_version.txt
          git commit -m "Update Reaper C++ API functions header to version ${latest_version}"
          git push origin update-header-${latest_version}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: "update-header-${{ needs.check-reaper-version.outputs.latest_version }}"
          title: "Update Reaper C++ API functions header to version ${{ needs.check-reaper-version.outputs.latest_version }}"
          body: "Automated update of the Reaper C++ API functions header."
